@page "/equipment"
@using GymManagement.Components.Classes;
@using System;
@using System.Collections;
@using System.Collections.Generic;
@using System.IO;
@using MySqlConnector;

<!--Created by Chelsea Yang-->
<!--Date: Apr 18, 2024-->
<!--This page displays the list of equipment, allows user to check in/out equipment, add new equipment, and delete equipment-->
<!--The changes to the equipment list will be reflected in the database-->
<!--The database and all changes are managed in EquipmentManagerUI class.-->
<h3>Equipment Management</h3>

<h4>Equipment List</h4>
<div style="height:11rem;overflow:auto;">
	<table style="width:100%">
		<tr>
			<th>Equipment ID</th>
			<th>Name</th>
			<th>Type</th>
			<th style="text-align:center;">Checked Out</th>
		</tr>
		@foreach (Equipment equipment in equipmentList)
		{
			<tr>
				<th>@equipment.ID</th>
				<th>@equipment.Name	</th>
				<th>@equipment.Type</th>
				<th style="text-align:center;"><input type="checkbox" checked="@equipment.IsCheckedOut" style="pointer-events: none;"></th>
			</tr>
		}
	</table>
</div>
<br />
<br />

<h4>Check In/Out Equipment</h4>
<form>
	<label>Enter Equipment ID: </label>
	<input type="text" placeholder="Equipment ID" @bind="checkOutEquipmentId"/>
	<button class="btn btn-primary" @onclick="CheckInOutEquipment">Check In/Out</button>
</form>
<br />
<br />

<h4>Add New Equipment</h4>
<form>
	<label>Enter Equipment ID: </label>
	<input type="number" placeholder="Equipment ID" @bind="newEquipmentId"/>
	<input type="text" placeholder="Equipment Name" @bind="newEquipmentName"/>
	<label>Select Equipment Type: </label>
	<select @bind="newEquipmentType">
		<option value="">Choose Equipment Type</option>
		<option value="Weights">Weights</option>
		<option value="Cardio">Cardio</option>
		<option value="Machine">Machine</option>
	</select>
	<button class="btn btn-primary" @onclick="CreateNewEquipment">Add Equipment</button>
</form>
<br />
<br />

<h4>Delete Equipment</h4>
<form>
	<label>Enter Equipment ID: </label>
	<input type="text" placeholder="Equipment ID" @bind="deleteEquipmentId" />
	<button class="btn btn-primary" @onclick="DeleteEquipment">Delete</button>
</form>

@code {
	List<Equipment> equipmentList = new List<Equipment>();
	EquipmentManagerUI equipmentManagerUI = new EquipmentManagerUI();
	int checkOutEquipmentId;
	int newEquipmentId;
	string newEquipmentName;
	string newEquipmentType;
	int deleteEquipmentId;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		equipmentManagerUI.CreateEquipmentList();
		equipmentList = equipmentManagerUI.ReadEquipment();
	}

	public async void CheckInOutEquipment()
	{
		List<int> equipmentIDs = new List<int>();
		foreach (Equipment equipment in equipmentList) equipmentIDs.Add(equipment.ID);

		if (!(equipmentIDs.Contains(checkOutEquipmentId)))
		{
			await Application.Current.MainPage.DisplayAlert("Equipment does not exist.", $"An equipment with ID: {checkOutEquipmentId} does not exist. Please enter a valid ID.", "OK");
			return;
		}
		MySqlConnectionStringBuilder builder = new MySqlConnectionStringBuilder
			{
				Server = "localhost",
				UserID = "root",
				Password = "password",
				Database = "demo211",
			};

		MySqlConnection connection = new MySqlConnection(builder.ConnectionString);
		connection.Open();
		string update;

		foreach (Equipment equipment in equipmentList)
		{
			if (checkOutEquipmentId == equipment.ID)
			{
				if (equipment.IsCheckedOut == false) 
				{
					update = $"update Equipment set CheckedOut = 1 where ID={checkOutEquipmentId}";
					MySqlCommand updateCmd = new MySqlCommand(update, connection);
					updateCmd.ExecuteNonQuery();
				}
				else 
				{
					update = $"update Equipment set CheckedOut = 0 where ID={checkOutEquipmentId}";
					MySqlCommand updateCmd = new MySqlCommand(update, connection);
					updateCmd.ExecuteNonQuery();
				}
			}
		}
		connection.Close();
	}

	public async void CreateNewEquipment()
	{
		List<int> equipmentIDs = new List<int>();
		foreach (Equipment equipment in equipmentList) equipmentIDs.Add(equipment.ID);

		if (equipmentIDs.Contains(newEquipmentId))
		{
			await Application.Current.MainPage.DisplayAlert("Equipment already exists.", $"An equipment with ID: {newEquipmentId} already exists. Please enter a unique ID.", "OK");
			return;
		}

		if (newEquipmentName == null)
		{
			await Application.Current.MainPage.DisplayAlert("Equipment name missing", "Please enter the equipment name.", "OK");
			return;
		}

		if (newEquipmentType == null)
		{
			await Application.Current.MainPage.DisplayAlert("Equipment type missing", "Please choose the equipment type.", "OK");
			return;
		}

		Equipment newEquipment = new Equipment(newEquipmentId, newEquipmentName, newEquipmentType);
		equipmentList.Add(newEquipment);
		MySqlConnectionStringBuilder builder = new MySqlConnectionStringBuilder
			{
				Server = "localhost",
				UserID = "root",
				Password = "password",
				Database = "demo211",
			};
		MySqlConnection connection = new MySqlConnection(builder.ConnectionString);
		connection.Open();

		try
		{
			string insertNewEquipment = $"insert into Equipment values({newEquipmentId}, '{newEquipmentName}', '{newEquipmentType}','0')";
			MySqlCommand insertNewEquipmentCmd = new MySqlCommand(insertNewEquipment, connection);
			insertNewEquipmentCmd.ExecuteNonQuery();
		} catch (MySqlException e)
		{
			Console.WriteLine("Error: SQL INSERT syntax error.", e.ToString());
		}


		connection.Close();
	}

	public async void DeleteEquipment()
	{
		List<int> equipmentIDs = new List<int>();
		foreach (Equipment equipment in equipmentList) equipmentIDs.Add(equipment.ID);

		if (!(equipmentIDs.Contains(deleteEquipmentId)))
		{
			await Application.Current.MainPage.DisplayAlert("Equipment does not exist.", $"An equipment with ID: {deleteEquipmentId} does not exist. Please enter a valid ID.", "OK");
			return;
		}
		Equipment deleteEquipment = new Equipment();
		foreach (Equipment equipment in equipmentList) {
			if (equipment.ID == deleteEquipmentId) {
				deleteEquipment.ID = equipment.ID;
				deleteEquipment.Name = equipment.Name;
				deleteEquipment.Type = equipment.Type;
				deleteEquipment.IsCheckedOut = equipment.IsCheckedOut;
			}
		}

		equipmentList.Remove(deleteEquipment);

		MySqlConnectionStringBuilder builder = new MySqlConnectionStringBuilder
			{
				Server = "localhost",
				UserID = "root",
				Password = "password",
				Database = "demo211",
			};
		MySqlConnection connection = new MySqlConnection(builder.ConnectionString);
		connection.Open();

		try
		{
			string delete = $"delete from Equipment where ID = {deleteEquipmentId}";
			MySqlCommand deleteCmd = new MySqlCommand(delete, connection);
			deleteCmd.ExecuteNonQuery();
		} catch (MySqlException e)
		{
			Console.WriteLine("Error: SQL DELETE syntax error.", e.ToString());
		}

		connection.Close();
	}
}
